{"version":3,"sources":["components/Cell.js","block.js","gameHelpers.js","components/Stage.js","components/Display.js","components/Button.js","components/Puyo.js","hooks/useCurrentBlock.js","hooks/useStage.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","type","BLOCK","R","color","G","B","O","randomBlock","Math","floor","random","length","emptyBlock","STAGE_HEIGHT","createStage","Array","from","fill","rotationPosition","block","dir","rotLoc","position","x","y","position2","curXPos","curYPos","curX2Pos","curY2Pos","Stage","stage","Display","text","display","Button","callBack","onClick","Puyo","useState","gameStart","setGameStart","gameOver","setGameOver","score","setScore","PUYO_ROW","color1","prev","upperColor","lowerColor","newDir","newPositions","useCurrentBlock","currentBlock","setCurBlock","updateCurPos","resetCurPos","rotateCurBlock","resetCurrentBlock","setStage","updateStage","useCallback","prevStage","prevPosition","prevPosition2","newStage","i","j","temp","tempcolor1","resetStage","emptyHeights","heights","number","removables","minHeight","removeX","removeY","useStage","registerCollision","handleRemoval","console","log","removablesContains","array","removalHelper","positionArrayContains","newPosition","push","anotherBlock","removeBlocks","newRemovables","k","extraScore","moveBlock","xdir","ydir","rotate","xPos","xPos2","yPos","yPos2","STAGE_WIDTH","checkBoundaries","futurePosition","checkRotationBoundaries","curStage","checkCollision","scoreMultiplier","allBlocksRemoved","removalResult","newScore","setTimeout","window","location","reload","newBlock","handleCollision","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Object","assign","moveWrapper","tabIndex","onKeyDown","e","keyCode","move","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33e7a47d.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nconst Cell = (props) => (\n  <div className={props.type}>\n  </div>\n);\n\nexport default Cell;","// The types of blocks availiable\nexport const BLOCK = {\n    R: {\n        color: \"RED\"\n    },\n    G: {\n        color: \"GREEN\"\n    },\n    B: {\n        color: \"BLUE\"\n    },\n    O: {\n        color: \"EMPTY\"\n    },\n}\n\n// Find some way to to generate numbers for no double colour block\nexport const randomBlock = () => {\n    const block = 'RGB';\n    // can't reach the final element, the empty cell\n    const randomBlock = block[Math.floor(Math.random() * block.length)];\n    return BLOCK[randomBlock];\n}\n\nexport const emptyBlock = () => {\n    return BLOCK['O'];\n}","import Cell from './components/Cell';\nimport { emptyBlock } from './block';\n\n// Stage size constants\nexport const STAGE_WIDTH = 6;\nexport const STAGE_HEIGHT = 13;\n\n// The starting point of puyo's\nexport const PUYO_COL = 3;\nexport const PUYO_ROW = 0;\n\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill(<Cell type = {emptyBlock().color}/>));\n\nexport const rotationPosition = (block, dir) => {\n    let rotLoc = {position: {x: 0, y: 0}, position2: {x: 0, y: 0}};\n    let curXPos = block.position.x;\n    let curYPos = block.position.y;\n    let curX2Pos  = block.position2.x;\n    let curY2Pos = block.position2.y;\n    if (dir === 0) {\n        rotLoc.position.x = curXPos;\n        rotLoc.position.y = curYPos - 1;\n        rotLoc.position2.x = curX2Pos + 1;\n        rotLoc.position2.y = curY2Pos;\n    } else if (dir === 1) {\n        rotLoc.position.x = curXPos + 1;\n        rotLoc.position.y = curYPos + 1;\n        rotLoc.position2.x = curX2Pos;\n        rotLoc.position2.y = curY2Pos;\n    } else if (dir === 2) {\n        rotLoc.position.x = curXPos -1 ;\n        rotLoc.position.y = curYPos;\n        rotLoc.position2.x = curX2Pos;\n        rotLoc.position2.y = curY2Pos + 1;\n    } else if (dir === 3) {\n        rotLoc.position.x = curXPos;\n        rotLoc.position.y = curYPos;\n        rotLoc.position2.x = curX2Pos - 1;\n        rotLoc.position2.y = curY2Pos - 1;\n    }\n    return rotLoc;\n}\n","import React from 'react';\nimport './Stage.css';\n\nconst Stage = (props) => (\n  <div className = 'stage'>\n    {props.stage}\n  </div>\n);\n\nexport default Stage;\n","import React from 'react';\nimport \"./Display.css\";\n\nconst Display = (props) => (\n  <div className = \"Display\"> {props.text} {props.display} </div>\n)\n\nexport default Display;","import React from 'react';\nimport \"./Button.css\";\n\nconst Button = ({callBack, text}) => (\n  <button className = \"button\" onClick = {callBack}>{text}</button>\n)\n\nexport default Button;","import React from 'react';\n\nimport { STAGE_HEIGHT, STAGE_WIDTH, PUYO_COL, PUYO_ROW, rotationPosition } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport Button from './Button';\n\nimport { useState } from 'react';\nimport { useCurrentBlock } from '../hooks/useCurrentBlock';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { randomBlock } from '../block';\n\nimport \"./Puyo.css\";\n\n\nconst Puyo = () => {\n  // GameOver is initially false\n  const [gameStart, setGameStart] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock] = useCurrentBlock();\n  const [stage, setStage, resetStage, updateStage, registerCollision, handleRemoval] = useStage(currentBlock);\n\n  console.log(\"rerender\");\n\n// Determines if a block can be moved in the given x and y directions\n  const checkBoundaries = (currentBlock, xdir, ydir) => {\n    let xPos = currentBlock.position.x;\n    let xPos2 = currentBlock.position2.x;\n    let yPos = currentBlock.position.y;\n    let yPos2 = currentBlock.position2.y;\n    // Prevent overlapping blocks moving left\n    if (xPos > 0) {\n      if ((stage[yPos2][xPos2 - 1].props.type !== \"EMPTY\" && xdir === -1) || \n      ((currentBlock.dir === 0 || currentBlock.dir === 2) && stage[yPos][xPos - 1].props.type !== \"EMPTY\" && xdir === 1)) {\n        return false;\n      }\n    }\n    // PRevent overlapping blocks moving right\n    if (xPos < STAGE_WIDTH - 1) {\n      if ((stage[yPos2][xPos2 + 1].props.type !== \"EMPTY\" && xdir === 1)\n      || ((currentBlock.dir === 0 || currentBlock.dir === 2) && stage[yPos][xPos + 1].props.type !== \"EMPTY\" && xdir === 1)) {\n        return false;\n      }\n    }\n    // STAGE_HEIGHT - 2 because 0 based indexing on coordinates, and position counts the top block so must end one earlier\n    if ((xPos2 === 0 && xdir === -1) || (xPos === STAGE_WIDTH - 1 && xdir === 1) || (yPos2 === STAGE_HEIGHT - 1 && ydir === 1)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  // Determines if a rotation is valid at the given position\n  const checkRotationBoundaries = (currentBlock) => {\n    let xPos = currentBlock.position.x;\n    let yPos = currentBlock.position.y;\n    let dir = currentBlock.dir;\n    let futurePosition = rotationPosition(currentBlock, (dir + 1 ) % 4);\n    // Prevents rotation from upright to right on the right edge, rotating down on the bottom and rotating to the left on the left edge\n    if ((dir === 0 && xPos === STAGE_WIDTH - 1) || (dir === 1 && yPos === STAGE_HEIGHT - 1) || (dir === 2 && xPos === 0) ||\n    ((dir === 0 || dir === 3) && stage[futurePosition.position.y][futurePosition.position.x].props.type !== \"EMPTY\") || \n    ((dir === 1 || dir === 2) && stage[futurePosition.position2.y][futurePosition.position2.x].props.type !== \"EMPTY\")) { // Prevents rotating into existing block\n      return false;\n    } else {\n      return true;\n    }\n  } \n\n  const checkCollision = (block, stage) => {\n    if ((block.position2.y === STAGE_HEIGHT - 1) || (stage[block.position2.y + 1][block.position2.x].props.type !== \"EMPTY\") || \n    ((block.dir === 1 || block.dir === 3) && stage[block.position.y + 1][block.position.x].props.type !== \"EMPTY\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const removablesContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j].x === x && array[i][j].y === y) {\n        return true;\n      }\n    }\n  }\n    return false\n  }\n\n  const positionArrayContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].x === x && array[i].y === y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Recursive depth first search to find all connected blocks with the same colour\n  const removalHelper = (removables, position, type, stage, x, y) => {\n    if (removablesContains(removables, x, y) || positionArrayContains(position, x, y)) {\n      return null;\n    }\n    let newPosition = {x: x, y: y};\n    position.push(newPosition);\n\n    // Right\n    if (x + 1 < STAGE_WIDTH) {\n      if (stage[y][x + 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x + 1, y);\n        if (anotherBlock !== null) {\n          position = anotherBlock;\n        }\n     }\n    }\n    \n    // Under\n    if (y + 1 < STAGE_HEIGHT) {\n      if (stage[y + 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y + 1);\n        if (anotherBlock !== null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    \n    // Left\n    if (x !== 0) {\n      if (stage[y][x - 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x - 1, y);\n        if (anotherBlock !== null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    \n    \n    // Over\n    if (y !== 0) {\n     if (stage[y - 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y - 1);\n        if (anotherBlock !== null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    return position;\n  }\n\n  // Remove connected blocks\n  const removeBlocks = (stage) => {\n    let removables = [];\n    let heights = new Array(6);\n    heights.fill(0);\n    // i = y, j  = x\n    for (let y = 0; y < STAGE_HEIGHT; y++) {\n      for (let x = 0; x < STAGE_WIDTH; x++) {\n          let type = stage[y][x].props.type;\n          if (type !== \"EMPTY\" && !removablesContains(removables, x, y)) {\n            let newPosition = [];\n            let newRemovables = removalHelper(removables, newPosition, type, stage, x, y);\n            if (newRemovables.length > 0) {\n              for (let k = 0; k < newRemovables.length; k++) {\n                heights[newRemovables[k].x]++;\n              }\n            }\n            removables.push(newRemovables);\n          }\n      }\n    }\n    let extraScore = 0;\n    for (let i = 0; i < removables.length; i++) {\n      if (removables[i].length >= 4) {\n          for (let j = 0; j < removables[i].length; j++) {\n            extraScore = extraScore + 10;\n          }\n      }\n    }\n    let newStage = handleRemoval(stage, removables);\n    setStage(newStage);\n    return [newStage, extraScore]\n  }\n\n  const handleCollision = (block, prevStage) => {\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    let scoreMultiplier = 1;\n    let allBlocksRemoved = false;\n    let newStage = prevStage;\n    while (!allBlocksRemoved) {\n      let removalResult = removeBlocks(newStage);\n      newStage = removalResult[0];\n      let newScore = removalResult[1];\n      if (newScore === 0) {\n        allBlocksRemoved = true;\n      } else {\n        setScore(score + newScore * scoreMultiplier);\n      }\n      scoreMultiplier++;\n    }\n    // The player loses if the space where new blocks are spawned is occupied (i.e not EMPTY)\n    if (newStage[PUYO_ROW][PUYO_COL].props.type !== \"EMPTY\" || newStage[PUYO_ROW + 1][PUYO_COL].props.type !== \"EMPTY\") {\n      setGameStart(false);\n      setTimeout(function() {setScore(0)}, 1000);\n      setTimeout(function() {setGameOver(true)}, 1000);\n      setTimeout(function() {window.location.reload()}, 3000);\n    } else {\n      newStage = registerCollision(block, newStage, upperColor, lowerColor);\n      setStage(newStage);\n      let newBlock = resetCurPos(upperColor, lowerColor)\n      setCurBlock(newBlock);\n    }\n  }\n\n  const moveBlock = (xdir, ydir, prevPosition, prevPosition2, rotate) => {\n    let block;\n    if (checkBoundaries(currentBlock, xdir, ydir) && !rotate) { \n      block = updateCurPos(currentBlock, xdir, ydir);\n    } else if (checkRotationBoundaries(currentBlock) && rotate) {\n      block = rotateCurBlock(currentBlock); \n    } else {\n      return;\n    }\n    let curStage = updateStage(block, stage, prevPosition, prevPosition2)\n    setStage(curStage);\n    if (checkCollision(block, curStage)) {\n      handleCollision(block, curStage);\n    } else {\n      setCurBlock(block);\n    }\n  }\n  \n  const startGame = () => {\n    // Providing the colours in this file maintains colour state across the current block and the stage\n    setGameOver(false);\n    setGameStart(true);\n    setScore(0);\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    setCurBlock(resetCurPos(upperColor, lowerColor));\n    setStage(resetStage(upperColor, lowerColor));\n  }\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      // Copy by value to preserve previous position\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n      if (keyCode === 37) {\n          moveBlock(-1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 39) {\n          moveBlock(1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 40) {\n          moveBlock(0, 1, prevPosition, prevPosition2, false)\n      } else if (keyCode === 38) {\n         moveBlock(0, 0, prevPosition, prevPosition2, true);\n      }\n    }\n  }\n\n  const moveWrapper = () => {\n    if (gameStart) {\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n      moveBlock(0, 1, prevPosition, prevPosition2, false);\n    }\n  }\n\n  // Moves the player's block down every 300 milliseconds\n  useInterval(() => {\n    moveWrapper();\n  }, 300);\n\n  // Different screen for game over\n  if (!gameOver) {\n  return (\n    <div className = 'puyo' tabIndex = \"0\" onKeyDown={e => move(e)}>\n      <aside>\n        <Display text =\"Score\" display = {score}/>\n        <div className = \"startButton\">\n          <Button callBack = { startGame } text = \"New Game\"/>\n        </div>\n      </aside>\n      <Stage stage = { stage } />\n    </div>\n  )\n  } else {\n    return (\n      <div>\n      <h2 className = \"gameOver\"> Game Over! Better luck next time! </h2>\n      </div>\n    )\n  }\n};\n\nexport default Puyo;\n","import { useState } from 'react';\nimport { PUYO_COL, PUYO_ROW, rotationPosition } from '../gameHelpers';\n\nexport const useCurrentBlock = () => {\n    // dir = 0 is up, dir = 1 is right, dir = 2 is down, dir = 3 is pointing left\n    // Initial state, never used anyway\n    const [currentBlock, setCurBlock] = useState({\n        position: { x: PUYO_COL, y: PUYO_ROW },\n        position2: {x: PUYO_COL, y: PUYO_ROW + 1},\n        color: 'EMPTY',\n        color1: 'EMPTY',\n        dir: 0\n    });\n    \n    const updateCurPos = (prev, x, y) => {\n        return {\n            position: {x : (prev.position.x += x), y: (prev.position.y += y)},\n            position2: {x : (prev.position2.x += x), y: (prev.position2.y += y)},\n            color: prev.color,\n            color1: prev.color1,\n            dir: prev.dir\n        };\n    };\n\n    const resetCurPos = (upperColor, lowerColor) => {\n        return {\n            position: { x: PUYO_COL, y: PUYO_ROW },\n            position2: {x: PUYO_COL, y: PUYO_ROW + 1},\n            color: upperColor,\n            color1: lowerColor,\n            dir: 0\n        };\n    };\n\n    const rotateCurBlock = (prev) => {\n        let newDir = (prev.dir + 1 ) % 4;\n        let newPositions = rotationPosition(prev, newDir);\n        return {\n            position: newPositions.position,\n            position2: newPositions.position2,\n            color: prev.color,\n            color1: prev.color1,\n            dir: newDir\n        };\n    };\n\n    return [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock];\n}","import { useState, useCallback } from 'react';\nimport { createStage, STAGE_HEIGHT, STAGE_WIDTH, PUYO_COL, PUYO_ROW } from '../gameHelpers';\nimport Cell from '../components/Cell';\nimport { emptyBlock } from '../block';\n\nexport const useStage = (currentBlock, resetCurrentBlock) => {\n    // Initial State\n    const [stage, setStage] = useState(Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill(<Cell type = {emptyBlock().color}/>)));\n\n    const updateStage = useCallback ((currentBlock, prevStage, prevPosition, prevPosition2) => {\n        let newStage = createStage();\n        for (let i = 0; i < STAGE_HEIGHT; i++) {\n            for (let j = 0; j < STAGE_WIDTH; j++) {\n                newStage[i][j] = prevStage[i][j];\n            }\n        };\n        if (prevPosition && prevPosition2) {\n            newStage[prevPosition.y][prevPosition.x] = <Cell type = {emptyBlock().color}/>;\n            newStage[prevPosition2.y][prevPosition2.x] = <Cell type = {emptyBlock().color}/>;\n        }\n        // Will need to implement some form of keeping blocks saved\n        // to:do guarantee different colours between the top and bottom\n        let temp = (currentBlock.dir > 1) ? currentBlock.color1 : currentBlock.color;\n        let tempcolor1 =  (currentBlock.dir > 1) ? currentBlock.color : currentBlock.color1;\n        newStage[currentBlock.position.y][currentBlock.position.x] = <Cell type = {temp}/>;\n        newStage[currentBlock.position2.y][currentBlock.position2.x] = <Cell type = {tempcolor1}/>;\n        return newStage;\n    }, []);\n\n    const resetStage = useCallback((color, color1) => {\n        let newStage = createStage();\n        newStage[PUYO_ROW][PUYO_COL] = <Cell type = {color}/>;\n        newStage[PUYO_ROW + 1][PUYO_COL] = <Cell type = {color1}/>;\n        return newStage;\n    }, []);\n\n    const registerCollision = (block, stage, color, color1) => {\n        let newStage = createStage();\n        for (let i = 0; i < STAGE_HEIGHT; i++) {\n            for (let j = 0; j < STAGE_WIDTH; j++) {\n                newStage[i][j] = stage[i][j];\n            }\n        }\n        newStage[PUYO_ROW][PUYO_COL] = <Cell type = {color}/>;\n        newStage[PUYO_ROW + 1][PUYO_COL] = <Cell type = {color1}/>;\n        return newStage;\n    }\n\n    const emptyHeights = (heights) => {\n        for (let i = 0; i < heights.length; i++) {\n            if (heights[i].number !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const handleRemoval = (stage, removables) => {\n        let newStage = createStage();\n        for (let i = 0; i < STAGE_HEIGHT; i++) {\n            for (let j = 0; j < STAGE_WIDTH; j++) {\n                newStage[i][j] = stage[i][j];\n            }\n        }\n        let heights = new Array(6);\n        for (let i = 0; i < 6; i++) {\n            heights[i] = {number: 0, minHeight: 0};\n        }\n        for (let i = 0; i < removables.length; i++) {\n            if (removables[i].length >= 4) {\n                for (let j = 0; j < removables[i].length; j++) {\n                    let removeX = removables[i][j].x;\n                    let removeY = removables[i][j].y;\n                    newStage[removeY][removeX] =  <Cell type = {emptyBlock().color}/>;\n                    heights[removeX].number++;\n                    if (heights[removeX].minHeight < removeY) {\n                        heights[removeX].minHeight = removeY;\n                    }\n                }\n            }\n        }\n        while (!emptyHeights(heights)) {\n            for (let i = 0; i < heights.length; i++) {\n                if (heights[i].number !== 0) {\n                    for (let j = heights[i].minHeight; j > 0; j--) {\n                        newStage[j][i] = <Cell type = {newStage[j - 1][i].props.type}/>;\n                    }\n                    newStage[0][i] = <Cell type = {emptyBlock().color}/>;\n                    heights[i].number--;\n                }\n            }\n        }\n        return newStage;\n    }\n\n    return [stage, setStage, resetStage, updateStage, registerCollision, handleRemoval];\n}","import { useEffect, useRef } from 'react';\n\n/** Written by Dan Abramov, taken from https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}","import React from 'react';\nimport Puyo from './components/Puyo';\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"App\">\n    <h1 id = \"headline\"> Puyo Puyo!</h1>\n    <Puyo />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}