{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wyu/Desktop/puyo/puyo/src/components/Puyo.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createStage, STAGE_HEIGHT, STAGE_WIDTH, rotationPosition } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport Button from './Button';\nimport { useState } from 'react';\nimport { useCurrentBlock } from '../hooks/useCurrentBlock';\nimport { useStage } from '../hooks/useStage';\nimport { randomBlock } from '../block';\nimport \"./Puyo.css\";\n\nconst Puyo = () => {\n  _s();\n\n  // GameOver is initially false\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock] = useCurrentBlock();\n  const [stage, setStage, resetStage, updateStage, registerCollision] = useStage(currentBlock);\n  console.log(\"rerender\");\n\n  const checkBoundaries = (currentBlock, xdir, ydir) => {\n    let xPos = currentBlock.position.x;\n    let xPos2 = currentBlock.position2.x;\n    let yPos2 = currentBlock.position2.y; // STAGE_HEIGHT - 2 because 0 based indexing on coordinates, and position counts the top block so must end one earlier\n\n    if (xPos2 === 0 && xdir === -1 || xPos === STAGE_WIDTH - 1 && xdir === 1 || yPos2 === STAGE_HEIGHT - 1 && ydir === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const checkRotationBoundaries = currentBlock => {\n    let xPos = currentBlock.position.x;\n    let yPos = currentBlock.position.y;\n    let dir = currentBlock.dir;\n    let futurePosition = rotationPosition(currentBlock, (dir + 1) % 4);\n    console.log(futurePosition.position); // Prevents rotation from upright to right on the right edge, rotating down on the bottom and rotating to the left on the left edge\n\n    if (dir === 0 && xPos === STAGE_WIDTH - 1 || dir === 1 && yPos === STAGE_HEIGHT - 1 || dir === 2 && xPos === 0 || (dir === 0 || dir === 3) && stage[futurePosition.position.y][futurePosition.position.x].props.type != \"EMPTY\" || (dir === 1 || dir === 2) && stage[futurePosition.position2.y][futurePosition.position2.x].props.type != \"EMPTY\") {\n      // Prevents rotating into existing block\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const checkCollision = (block, stage) => {\n    console.log(block.position2.y);\n\n    if (block.position2.y === STAGE_HEIGHT - 1 || stage[block.position2.y + 1][block.position2.x].props.type != \"EMPTY\" || (block.dir === 1 || block.dir === 3) && stage[block.position.y + 1][block.position.x].props.type != \"EMPTY\") {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const positionArrayContains = (array, x, y) => {\n    return array.forEach(element => element.some(e => e.x === x && e.y === y));\n  };\n\n  const removalHelper = (removables, type, stage, y, x) => {\n    let position = [];\n    let newPosition = {\n      x: x,\n      y: y\n    };\n    position.push(newPosition); // Right\n\n    if (x + 1 < STAGE_WIDTH) {\n      if (stage[y][x + 1].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y, x + 1);\n        position.push(anotherBlock);\n      }\n    } // Under\n\n\n    if (y + 1 < STAGE_HEIGHT) {\n      if (stage[y + 1][x].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y + 1, x);\n        position.push(anotherBlock);\n      }\n    } // Left\n\n\n    if (x - 1 > -1) {\n      if (stage[y][x - 1].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y, x - 1);\n        position.push(anotherBlock);\n      }\n    } // Over\n\n\n    if (y - 1 > -1) {\n      if (stage[y - 1][x].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y - 1);\n        position.push(anotherBlock);\n      }\n    }\n\n    return position;\n  };\n\n  const removeBlocks = stage => {\n    let score = 0;\n    let removables = [];\n    let heights = new Array(6);\n    heights.fill(0);\n\n    for (let i = 0; i < STAGE_HEIGHT; i++) {\n      for (let j = 0; j < STAGE_WIDTH; j++) {\n        let type = stage[i][j].props.type;\n\n        if (type != \"EMPTY\" && !positionArrayContains(removables, j, i)) {\n          let newRemovables = removalHelper(removables, type, stage, i, j);\n\n          if (newRemovables.length > 0) {\n            for (let k = 0; k < newRemovables.length; k++) {\n              heights[newRemovables[k].x]++;\n            }\n\n            removables.push(newRemovables);\n          }\n        }\n      }\n    }\n\n    score = 10 * removables.length;\n    return score;\n  };\n\n  const handleCollision = (block, stage) => {\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    let newStage = registerCollision(block, stage, upperColor, lowerColor);\n    setStage(newStage);\n    let scoreMultiplier = 1;\n    let allBlocksRemoved = false;\n\n    while (!allBlocksRemoved) {\n      let newScore = removeBlocks(stage);\n      console.log(score);\n\n      if (newScore === 0) {\n        allBlocksRemoved = true;\n      }\n\n      setScore(score + newScore * scoreMultiplier);\n      scoreMultiplier++;\n    }\n\n    let newBlock = resetCurPos(upperColor, lowerColor);\n    setCurBlock(newBlock);\n  };\n\n  const moveBlock = (xdir, ydir, prevPosition, prevPosition2, rotate) => {\n    let block;\n\n    if (checkBoundaries(currentBlock, xdir, ydir) && !rotate) {\n      block = updateCurPos(currentBlock, xdir, ydir);\n    } else if (checkRotationBoundaries(currentBlock) && rotate) {\n      block = rotateCurBlock(currentBlock);\n    } else {\n      return;\n    }\n\n    let curStage = updateStage(block, stage, prevPosition, prevPosition2);\n    setStage(curStage);\n\n    if (checkCollision(block, curStage)) {\n      handleCollision(block, curStage);\n    } else {\n      setCurBlock(block);\n    }\n  };\n\n  const startGame = () => {\n    // Providing the colours in this file maintains colour state across the current block and the stage\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    setCurBlock(resetCurPos(upperColor, lowerColor));\n    setStage(resetStage(upperColor, lowerColor));\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      // Copy by value to preserve previous position\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n\n      if (keyCode === 37) {\n        moveBlock(-1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 39) {\n        moveBlock(1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 40) {\n        moveBlock(0, 1, prevPosition, prevPosition2, false);\n      } else if (keyCode === 38) {\n        moveBlock(0, 0, prevPosition, prevPosition2, true);\n      }\n    }\n  }; // Different screen for game over\n\n\n  if (!gameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puyo\",\n      tabIndex: \"0\",\n      onKeyDown: e => move(e),\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [/*#__PURE__*/_jsxDEV(Display, {\n          text: \"Score\",\n          display: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"startButton\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            callBack: startGame,\n            text: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Game Over! Do you want to play again? \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"startButton\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          callBack: startGame,\n          text: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Puyo, \"eHX0h0FzXTnRL8/yawlIjWfpVwM=\", false, function () {\n  return [useCurrentBlock, useStage];\n});\n\n_c = Puyo;\nexport default Puyo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Puyo\");","map":{"version":3,"sources":["/home/wyu/Desktop/puyo/puyo/src/components/Puyo.js"],"names":["React","createStage","STAGE_HEIGHT","STAGE_WIDTH","rotationPosition","Stage","Display","Button","useState","useCurrentBlock","useStage","randomBlock","Puyo","gameOver","setGameOver","score","setScore","currentBlock","setCurBlock","updateCurPos","resetCurPos","rotateCurBlock","stage","setStage","resetStage","updateStage","registerCollision","console","log","checkBoundaries","xdir","ydir","xPos","position","x","xPos2","position2","yPos2","y","checkRotationBoundaries","yPos","dir","futurePosition","props","type","checkCollision","block","positionArrayContains","array","forEach","element","some","e","removalHelper","removables","newPosition","push","anotherBlock","removeBlocks","heights","Array","fill","i","j","newRemovables","length","k","handleCollision","upperColor","color","lowerColor","newStage","scoreMultiplier","allBlocksRemoved","newScore","newBlock","moveBlock","prevPosition","prevPosition2","rotate","curStage","startGame","move","keyCode","Object","assign"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { createStage , STAGE_HEIGHT, STAGE_WIDTH, rotationPosition } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport Button from './Button';\n\nimport { useState } from 'react';\nimport { useCurrentBlock } from '../hooks/useCurrentBlock';\nimport { useStage } from '../hooks/useStage';\nimport { randomBlock } from '../block';\n\nimport \"./Puyo.css\";\n\n\nconst Puyo = () => {\n  // GameOver is initially false\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock] = useCurrentBlock();\n  const [stage, setStage, resetStage, updateStage, registerCollision] = useStage(currentBlock);\n\n  console.log(\"rerender\");\n\n  const checkBoundaries = (currentBlock, xdir, ydir) => {\n    let xPos = currentBlock.position.x;\n    let xPos2 = currentBlock.position2.x;\n    let yPos2 = currentBlock.position2.y;\n    // STAGE_HEIGHT - 2 because 0 based indexing on coordinates, and position counts the top block so must end one earlier\n    if ((xPos2 === 0 && xdir === -1) || (xPos === STAGE_WIDTH - 1 && xdir === 1) || (yPos2 === STAGE_HEIGHT - 1 && ydir === 1)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const checkRotationBoundaries = (currentBlock) => {\n    let xPos = currentBlock.position.x;\n    let yPos = currentBlock.position.y;\n    let dir = currentBlock.dir;\n    let futurePosition = rotationPosition(currentBlock, (dir + 1 ) % 4);\n    console.log(futurePosition.position);\n    // Prevents rotation from upright to right on the right edge, rotating down on the bottom and rotating to the left on the left edge\n    if ((dir === 0 && xPos === STAGE_WIDTH - 1) || (dir === 1 && yPos === STAGE_HEIGHT - 1) || (dir === 2 && xPos === 0) ||\n    ((dir === 0 || dir === 3) && stage[futurePosition.position.y][futurePosition.position.x].props.type != \"EMPTY\") || \n    ((dir === 1 || dir === 2) && stage[futurePosition.position2.y][futurePosition.position2.x].props.type != \"EMPTY\")) { // Prevents rotating into existing block\n      return false;\n    } else {\n      return true;\n    }\n  } \n\n  const checkCollision = (block, stage) => {\n    console.log(block.position2.y);\n    if ((block.position2.y === STAGE_HEIGHT - 1) || (stage[block.position2.y + 1][block.position2.x].props.type != \"EMPTY\") || \n    ((block.dir === 1 || block.dir === 3) && stage[block.position.y + 1][block.position.x].props.type != \"EMPTY\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const positionArrayContains = (array, x, y) => {\n    return array.forEach(element => element.some(e => e.x === x && e.y === y));\n  }\n\n  const removalHelper = (removables, type, stage, y, x) => {\n    let position = [];\n    let newPosition = {x: x, y: y};\n    position.push(newPosition);\n    // Right\n    if (x + 1 < STAGE_WIDTH) {\n      if (stage[y][x + 1].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y, x + 1);\n        position.push(anotherBlock);\n     }\n    }\n    // Under\n    if (y + 1 < STAGE_HEIGHT) {\n      if (stage[y + 1][x].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y + 1, x);\n        position.push(anotherBlock);\n      }\n    }\n    // Left\n    if (x - 1 > -1) {\n      if (stage[y][x - 1].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y, x - 1);\n        position.push(anotherBlock);\n      }\n    }\n    // Over\n    if (y - 1 > -1) {\n     if (stage[y - 1][x].props.type === type && !positionArrayContains(removables, x + 1, y)) {\n        let anotherBlock = removalHelper(removables, type, stage, y - 1);\n        position.push(anotherBlock);\n      }\n    }\n    return position;\n  }\n\n  const removeBlocks = (stage) => {\n    let score = 0;\n    let removables = [];\n    let heights = new Array(6);\n    heights.fill(0);\n    for (let i = 0; i < STAGE_HEIGHT; i++) {\n      for (let j = 0; j < STAGE_WIDTH; j++) {\n          let type = stage[i][j].props.type;\n          if (type != \"EMPTY\" && !positionArrayContains(removables, j, i)) {\n            let newRemovables = removalHelper(removables, type, stage, i, j);\n            if (newRemovables.length > 0) {\n              for (let k = 0; k < newRemovables.length; k++) {\n                heights[newRemovables[k].x]++;\n              }\n              removables.push(newRemovables);\n            }\n          }\n    }\n    }\n    score = 10 * removables.length;\n    return score;\n  }\n\n  const handleCollision = (block, stage) => {\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    let newStage = registerCollision(block, stage, upperColor, lowerColor);\n    setStage(newStage);\n    let scoreMultiplier = 1;\n    let allBlocksRemoved = false;\n    while (!allBlocksRemoved) {\n      let newScore = removeBlocks(stage);\n      console.log(score);\n      if (newScore === 0) {\n        allBlocksRemoved = true;\n      }\n      setScore(score + newScore * scoreMultiplier);\n      scoreMultiplier++;\n    }\n    let newBlock = resetCurPos(upperColor, lowerColor)\n    setCurBlock(newBlock);\n  }\n\n  const moveBlock = (xdir, ydir, prevPosition, prevPosition2, rotate) => {\n    let block;\n    if (checkBoundaries(currentBlock, xdir, ydir) && !rotate) { \n      block = updateCurPos(currentBlock, xdir, ydir);\n    } else if (checkRotationBoundaries(currentBlock) && rotate) {\n      block = rotateCurBlock(currentBlock); \n    } else {\n      return;\n    }\n    let curStage = updateStage(block, stage, prevPosition, prevPosition2)\n    setStage(curStage);\n    if (checkCollision(block, curStage)) {\n      handleCollision(block, curStage);\n    } else {\n      setCurBlock(block);\n    }\n  }\n  \n  const startGame = () => {\n    // Providing the colours in this file maintains colour state across the current block and the stage\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    setCurBlock(resetCurPos(upperColor, lowerColor));\n    setStage(resetStage(upperColor, lowerColor));\n  }\n  \n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      // Copy by value to preserve previous position\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n      if (keyCode === 37) {\n          moveBlock(-1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 39) {\n          moveBlock(1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 40) {\n          moveBlock(0, 1, prevPosition, prevPosition2, false)\n      } else if (keyCode === 38) {\n         moveBlock(0, 0, prevPosition, prevPosition2, true);\n      }\n    }\n  }\n\n  // Different screen for game over\n  if (!gameOver) {\n  return (\n    <div className = 'puyo' tabIndex = \"0\" onKeyDown={e => move(e)}>\n      <aside>\n        <Display text =\"Score\" display = {score}/>\n        <div className = \"startButton\">\n          <Button callBack = { startGame } text = \"New Game\"/>\n        </div>\n      </aside>\n      <Stage stage = { stage } />\n    </div>\n  )\n  } else {\n    return (\n      <div>\n      <h2> Game Over! Do you want to play again? </h2>\n      <div className = \"startButton\">\n      <Button callBack = { startGame } text = \"New Game\"/>\n      </div>\n      </div>\n    )\n  }\n};\n\nexport default Puyo;\n"]},"metadata":{},"sourceType":"module"}