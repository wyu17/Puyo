{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wyu/Desktop/puyo/puyo/src/components/Puyo.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createStage, STAGE_HEIGHT, STAGE_WIDTH, PUYO_COL, PUYO_ROW, rotationPosition } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport Button from './Button';\nimport { useState } from 'react';\nimport { useCurrentBlock } from '../hooks/useCurrentBlock';\nimport { useStage } from '../hooks/useStage';\nimport { randomBlock } from '../block';\nimport \"./Puyo.css\";\n\nconst Puyo = () => {\n  _s();\n\n  // GameOver is initially false\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock] = useCurrentBlock();\n  const [stage, setStage, resetStage, updateStage, registerCollision, handleRemoval] = useStage(currentBlock);\n  console.log(\"rerender\");\n\n  const checkBoundaries = (currentBlock, xdir, ydir) => {\n    let xPos = currentBlock.position.x;\n    let xPos2 = currentBlock.position2.x;\n    let yPos2 = currentBlock.position2.y; // STAGE_HEIGHT - 2 because 0 based indexing on coordinates, and position counts the top block so must end one earlier\n\n    if (xPos2 === 0 && xdir === -1 || xPos === STAGE_WIDTH - 1 && xdir === 1 || yPos2 === STAGE_HEIGHT - 1 && ydir === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const checkRotationBoundaries = currentBlock => {\n    let xPos = currentBlock.position.x;\n    let yPos = currentBlock.position.y;\n    let dir = currentBlock.dir;\n    let futurePosition = rotationPosition(currentBlock, (dir + 1) % 4); // Prevents rotation from upright to right on the right edge, rotating down on the bottom and rotating to the left on the left edge\n\n    if (dir === 0 && xPos === STAGE_WIDTH - 1 || dir === 1 && yPos === STAGE_HEIGHT - 1 || dir === 2 && xPos === 0 || (dir === 0 || dir === 3) && stage[futurePosition.position.y][futurePosition.position.x].props.type != \"EMPTY\" || (dir === 1 || dir === 2) && stage[futurePosition.position2.y][futurePosition.position2.x].props.type != \"EMPTY\") {\n      // Prevents rotating into existing block\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const checkCollision = (block, stage) => {\n    if (block.position2.y === STAGE_HEIGHT - 1 || stage[block.position2.y + 1][block.position2.x].props.type != \"EMPTY\" || (block.dir === 1 || block.dir === 3) && stage[block.position.y + 1][block.position.x].props.type != \"EMPTY\") {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const removablesContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      for (let j = 0; j < array[i].length; j++) {\n        if (array[i][j].x === x && array[i][j].y === y) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const positionArrayContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].x === x && array[i].y === y) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Recursive depth first search to find all connected blocks with the same colour\n\n\n  const removalHelper = (removables, position, type, stage, x, y) => {\n    if (removablesContains(removables, x, y) || positionArrayContains(position, x, y)) {\n      return null;\n    }\n\n    let newPosition = {\n      x: x,\n      y: y\n    };\n    position.push(newPosition); // Right\n\n    if (x + 1 < STAGE_WIDTH) {\n      if (stage[y][x + 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x + 1, y);\n\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    } // Under\n\n\n    if (y + 1 < STAGE_HEIGHT) {\n      if (stage[y + 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y + 1);\n\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    } // Left\n\n\n    if (x != 0) {\n      if (stage[y][x - 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x - 1, y);\n\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    } // Over\n\n\n    if (y != 0) {\n      if (stage[y - 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y - 1);\n\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    }\n\n    return position;\n  };\n\n  const removeBlocks = stage => {\n    let removables = [];\n    let heights = new Array(6);\n    heights.fill(0); // i = y, j  = x\n\n    for (let y = 0; y < STAGE_HEIGHT; y++) {\n      for (let x = 0; x < STAGE_WIDTH; x++) {\n        let type = stage[y][x].props.type;\n\n        if (type != \"EMPTY\" && !removablesContains(removables, x, y)) {\n          let newPosition = [];\n          let newRemovables = removalHelper(removables, newPosition, type, stage, x, y);\n\n          if (newRemovables.length > 0) {\n            for (let k = 0; k < newRemovables.length; k++) {\n              heights[newRemovables[k].x]++;\n            }\n          }\n\n          removables.push(newRemovables);\n        }\n      }\n    }\n\n    let extraScore = 0;\n\n    for (let i = 0; i < removables.length; i++) {\n      if (removables[i].length >= 4) {\n        for (let j = 0; j < removables[i].length; j++) {\n          extraScore = extraScore + 10;\n        }\n      }\n    }\n\n    let newStage = handleRemoval(stage, removables);\n    setStage(newStage);\n    return [newStage, extraScore];\n  };\n\n  const handleCollision = (block, prevStage) => {\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    let scoreMultiplier = 1;\n    let allBlocksRemoved = false;\n    let newStage = prevStage;\n\n    while (!allBlocksRemoved) {\n      let removalResult = removeBlocks(newStage);\n      newStage = removalResult[0];\n      let newScore = removalResult[1];\n\n      if (newScore === 0) {\n        allBlocksRemoved = true;\n      } else {\n        setScore(score + newScore * scoreMultiplier);\n      }\n\n      scoreMultiplier++;\n    } // The player loses if the space where new blocks are spawned is occupied (i.e not EMPTY)\n\n\n    if (newStage[PUYO_ROW][PUYO_COL].props.type != \"EMPTY\" || newStage[PUYO_ROW + 1][PUYO_COL].props.type != \"EMPTY\") {\n      setScore(100);\n      setTimeout(function () {\n        setGameOver(true);\n      }, 1000);\n    } else {\n      newStage = registerCollision(block, newStage, upperColor, lowerColor);\n      setStage(newStage);\n      let newBlock = resetCurPos(upperColor, lowerColor);\n      setCurBlock(newBlock);\n    }\n  };\n\n  const moveBlock = (xdir, ydir, prevPosition, prevPosition2, rotate) => {\n    let block;\n\n    if (checkBoundaries(currentBlock, xdir, ydir) && !rotate) {\n      block = updateCurPos(currentBlock, xdir, ydir);\n    } else if (checkRotationBoundaries(currentBlock) && rotate) {\n      block = rotateCurBlock(currentBlock);\n    } else {\n      return;\n    }\n\n    let curStage = updateStage(block, stage, prevPosition, prevPosition2);\n    setStage(curStage);\n\n    if (checkCollision(block, curStage)) {\n      handleCollision(block, curStage);\n    } else {\n      setCurBlock(block);\n    }\n  };\n\n  const startGame = () => {\n    // Providing the colours in this file maintains colour state across the current block and the stage\n    setGameOver(false);\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    setCurBlock(resetCurPos(upperColor, lowerColor));\n    setStage(resetStage(upperColor, lowerColor));\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      // Copy by value to preserve previous position\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n\n      if (keyCode === 37) {\n        moveBlock(-1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 39) {\n        moveBlock(1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 40) {\n        moveBlock(0, 1, prevPosition, prevPosition2, false);\n      } else if (keyCode === 38) {\n        moveBlock(0, 0, prevPosition, prevPosition2, true);\n      }\n    }\n  }; // Different screen for game over\n\n\n  if (!gameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puyo\",\n      tabIndex: \"0\",\n      onKeyDown: e => move(e),\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [/*#__PURE__*/_jsxDEV(Display, {\n          text: \"Score\",\n          display: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"startButton\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            callBack: startGame,\n            text: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Game Over! Do you want to play again? \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"startButton\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          callBack: startGame,\n          text: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Puyo, \"W3NuFpoO53e1aK6Jn15I9QMcRmc=\", false, function () {\n  return [useCurrentBlock, useStage];\n});\n\n_c = Puyo;\nexport default Puyo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Puyo\");","map":{"version":3,"sources":["/home/wyu/Desktop/puyo/puyo/src/components/Puyo.js"],"names":["React","createStage","STAGE_HEIGHT","STAGE_WIDTH","PUYO_COL","PUYO_ROW","rotationPosition","Stage","Display","Button","useState","useCurrentBlock","useStage","randomBlock","Puyo","gameOver","setGameOver","score","setScore","currentBlock","setCurBlock","updateCurPos","resetCurPos","rotateCurBlock","stage","setStage","resetStage","updateStage","registerCollision","handleRemoval","console","log","checkBoundaries","xdir","ydir","xPos","position","x","xPos2","position2","yPos2","y","checkRotationBoundaries","yPos","dir","futurePosition","props","type","checkCollision","block","removablesContains","array","i","length","j","positionArrayContains","removalHelper","removables","newPosition","push","anotherBlock","removeBlocks","heights","Array","fill","newRemovables","k","extraScore","newStage","handleCollision","prevStage","upperColor","color","lowerColor","scoreMultiplier","allBlocksRemoved","removalResult","newScore","setTimeout","newBlock","moveBlock","prevPosition","prevPosition2","rotate","curStage","startGame","move","keyCode","Object","assign","e"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { createStage , STAGE_HEIGHT, STAGE_WIDTH, PUYO_COL, PUYO_ROW, rotationPosition } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport Button from './Button';\n\nimport { useState } from 'react';\nimport { useCurrentBlock } from '../hooks/useCurrentBlock';\nimport { useStage } from '../hooks/useStage';\nimport { randomBlock } from '../block';\n\nimport \"./Puyo.css\";\n\n\nconst Puyo = () => {\n  // GameOver is initially false\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentBlock, setCurBlock, updateCurPos, resetCurPos, rotateCurBlock] = useCurrentBlock();\n  const [stage, setStage, resetStage, updateStage, registerCollision, handleRemoval] = useStage(currentBlock);\n\n  console.log(\"rerender\");\n\n  const checkBoundaries = (currentBlock, xdir, ydir) => {\n    let xPos = currentBlock.position.x;\n    let xPos2 = currentBlock.position2.x;\n    let yPos2 = currentBlock.position2.y;\n    // STAGE_HEIGHT - 2 because 0 based indexing on coordinates, and position counts the top block so must end one earlier\n    if ((xPos2 === 0 && xdir === -1) || (xPos === STAGE_WIDTH - 1 && xdir === 1) || (yPos2 === STAGE_HEIGHT - 1 && ydir === 1)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const checkRotationBoundaries = (currentBlock) => {\n    let xPos = currentBlock.position.x;\n    let yPos = currentBlock.position.y;\n    let dir = currentBlock.dir;\n    let futurePosition = rotationPosition(currentBlock, (dir + 1 ) % 4);\n    // Prevents rotation from upright to right on the right edge, rotating down on the bottom and rotating to the left on the left edge\n    if ((dir === 0 && xPos === STAGE_WIDTH - 1) || (dir === 1 && yPos === STAGE_HEIGHT - 1) || (dir === 2 && xPos === 0) ||\n    ((dir === 0 || dir === 3) && stage[futurePosition.position.y][futurePosition.position.x].props.type != \"EMPTY\") || \n    ((dir === 1 || dir === 2) && stage[futurePosition.position2.y][futurePosition.position2.x].props.type != \"EMPTY\")) { // Prevents rotating into existing block\n      return false;\n    } else {\n      return true;\n    }\n  } \n\n  const checkCollision = (block, stage) => {\n    if ((block.position2.y === STAGE_HEIGHT - 1) || (stage[block.position2.y + 1][block.position2.x].props.type != \"EMPTY\") || \n    ((block.dir === 1 || block.dir === 3) && stage[block.position.y + 1][block.position.x].props.type != \"EMPTY\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const removablesContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j].x === x && array[i][j].y === y) {\n        return true;\n      }\n    }\n  }\n    return false\n  }\n\n  const positionArrayContains = (array, x, y) => {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].x === x && array[i].y === y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Recursive depth first search to find all connected blocks with the same colour\n  const removalHelper = (removables, position, type, stage, x, y) => {\n    if (removablesContains(removables, x, y) || positionArrayContains(position, x, y)) {\n      return null;\n    }\n    let newPosition = {x: x, y: y};\n    position.push(newPosition);\n\n    // Right\n    if (x + 1 < STAGE_WIDTH) {\n      if (stage[y][x + 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x + 1, y);\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n     }\n    }\n    \n    // Under\n    if (y + 1 < STAGE_HEIGHT) {\n      if (stage[y + 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y + 1);\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    \n    // Left\n    if (x != 0) {\n      if (stage[y][x - 1].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x - 1, y);\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    \n    \n    // Over\n    if (y != 0) {\n     if (stage[y - 1][x].props.type === type) {\n        let anotherBlock = removalHelper(removables, position, type, stage, x, y - 1);\n        if (anotherBlock != null) {\n          position = anotherBlock;\n        }\n      }\n    }\n    return position;\n  }\n\n  const removeBlocks = (stage) => {\n    let removables = [];\n    let heights = new Array(6);\n    heights.fill(0);\n    // i = y, j  = x\n    for (let y = 0; y < STAGE_HEIGHT; y++) {\n      for (let x = 0; x < STAGE_WIDTH; x++) {\n          let type = stage[y][x].props.type;\n          if (type != \"EMPTY\" && !removablesContains(removables, x, y)) {\n            let newPosition = [];\n            let newRemovables = removalHelper(removables, newPosition, type, stage, x, y);\n            if (newRemovables.length > 0) {\n              for (let k = 0; k < newRemovables.length; k++) {\n                heights[newRemovables[k].x]++;\n              }\n            }\n            removables.push(newRemovables);\n          }\n      }\n    }\n    let extraScore = 0;\n    for (let i = 0; i < removables.length; i++) {\n      if (removables[i].length >= 4) {\n          for (let j = 0; j < removables[i].length; j++) {\n            extraScore = extraScore + 10;\n          }\n      }\n    }\n    let newStage = handleRemoval(stage, removables);\n    setStage(newStage);\n    return [newStage, extraScore]\n  }\n\n  const handleCollision = (block, prevStage) => {\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    let scoreMultiplier = 1;\n    let allBlocksRemoved = false;\n    let newStage = prevStage;\n    while (!allBlocksRemoved) {\n      let removalResult = removeBlocks(newStage);\n      newStage = removalResult[0];\n      let newScore = removalResult[1];\n      if (newScore === 0) {\n        allBlocksRemoved = true;\n      } else {\n        setScore(score + newScore * scoreMultiplier);\n      }\n      scoreMultiplier++;\n    }\n    // The player loses if the space where new blocks are spawned is occupied (i.e not EMPTY)\n    if (newStage[PUYO_ROW][PUYO_COL].props.type != \"EMPTY\" || newStage[PUYO_ROW + 1][PUYO_COL].props.type != \"EMPTY\") {\n      setScore(100);\n      setTimeout(function() {setGameOver(true)}, 1000);\n    } else {\n      newStage = registerCollision(block, newStage, upperColor, lowerColor);\n      setStage(newStage);\n      let newBlock = resetCurPos(upperColor, lowerColor)\n      setCurBlock(newBlock);\n    }\n  }\n\n  const moveBlock = (xdir, ydir, prevPosition, prevPosition2, rotate) => {\n    let block;\n    if (checkBoundaries(currentBlock, xdir, ydir) && !rotate) { \n      block = updateCurPos(currentBlock, xdir, ydir);\n    } else if (checkRotationBoundaries(currentBlock) && rotate) {\n      block = rotateCurBlock(currentBlock); \n    } else {\n      return;\n    }\n    let curStage = updateStage(block, stage, prevPosition, prevPosition2)\n    setStage(curStage);\n    if (checkCollision(block, curStage)) {\n      handleCollision(block, curStage);\n    } else {\n      setCurBlock(block);\n    }\n  }\n  \n  const startGame = () => {\n    // Providing the colours in this file maintains colour state across the current block and the stage\n    setGameOver(false);\n    let upperColor = randomBlock().color;\n    let lowerColor = randomBlock().color;\n    setCurBlock(resetCurPos(upperColor, lowerColor));\n    setStage(resetStage(upperColor, lowerColor));\n  }\n  \n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      // Copy by value to preserve previous position\n      let prevPosition = Object.assign({}, currentBlock.position);\n      let prevPosition2 = Object.assign({}, currentBlock.position2);\n      if (keyCode === 37) {\n          moveBlock(-1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 39) {\n          moveBlock(1, 0, prevPosition, prevPosition2, false);\n      } else if (keyCode === 40) {\n          moveBlock(0, 1, prevPosition, prevPosition2, false)\n      } else if (keyCode === 38) {\n         moveBlock(0, 0, prevPosition, prevPosition2, true);\n      }\n    }\n  }\n\n  // Different screen for game over\n  if (!gameOver) {\n  return (\n    <div className = 'puyo' tabIndex = \"0\" onKeyDown={e => move(e)}>\n      <aside>\n        <Display text =\"Score\" display = {score}/>\n        <div className = \"startButton\">\n          <Button callBack = { startGame } text = \"New Game\"/>\n        </div>\n      </aside>\n      <Stage stage = { stage } />\n    </div>\n  )\n  } else {\n    return (\n      <div>\n      <h2> Game Over! Do you want to play again? </h2>\n      <div className = \"startButton\">\n      <Button callBack = { startGame } text = \"New Game\"/>\n      </div>\n      </div>\n    )\n  }\n};\n\nexport default Puyo;\n"]},"metadata":{},"sourceType":"module"}